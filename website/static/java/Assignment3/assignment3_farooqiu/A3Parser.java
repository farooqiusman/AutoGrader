
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Feb 09 21:15:42 EST 2023
//----------------------------------------------------

import java.io.*;

/** CUP v0.10k generated parser.
  * @version Thu Feb 09 21:15:42 EST 2023
  */
public class A3Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public A3Parser() {super();}

  /** Constructor which sets the default scanner. */
  public A3Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\057\000\002\020\003\000\002\002\004\000\002\020" +
    "\004\000\002\003\011\000\002\003\010\000\002\024\003" +
    "\000\002\024\002\000\002\025\005\000\002\025\003\000" +
    "\002\012\004\000\002\004\005\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\023\003" +
    "\000\002\023\004\000\002\013\005\000\002\013\004\000" +
    "\002\006\006\000\002\006\006\000\002\014\005\000\002" +
    "\015\007\000\002\015\011\000\002\016\011\000\002\017" +
    "\011\000\002\007\004\000\002\026\005\000\002\026\005" +
    "\000\002\026\002\000\002\021\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\005\000\002\022\006\000\002" +
    "\027\005\000\002\027\005\000\002\027\002\000\002\011" +
    "\005\000\002\011\005\000\002\010\004\000\002\010\002" +
    "\000\002\030\005\000\002\030\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\004\025\006\001\002\000\006\002\151\025" +
    "\006\001\002\000\006\002\001\025\001\001\002\000\006" +
    "\013\007\024\010\001\002\000\004\010\144\001\002\000" +
    "\004\013\011\001\002\000\004\010\012\001\002\000\006" +
    "\011\ufffb\025\016\001\002\000\006\011\ufffc\015\142\001" +
    "\002\000\006\011\ufff9\015\ufff9\001\002\000\004\011\020" +
    "\001\002\000\004\013\017\001\002\000\006\011\ufff8\015" +
    "\ufff8\001\002\000\004\022\021\001\002\000\020\012\033" +
    "\013\036\016\037\017\024\021\040\022\021\025\034\001" +
    "\002\000\006\002\ufffe\025\ufffe\001\002\000\024\012\ufff6" +
    "\013\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\025\ufff6\001\002\000\004\010\134\001\002\000\024" +
    "\012\ufff0\013\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022" +
    "\ufff0\023\ufff0\025\ufff0\001\002\000\024\012\ufff2\013\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\023\ufff2\025" +
    "\ufff2\001\002\000\024\012\ufff1\013\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\021\ufff1\022\ufff1\023\ufff1\025\ufff1\001\002\000" +
    "\024\012\ufff5\013\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5" +
    "\022\ufff5\023\ufff5\025\ufff5\001\002\000\022\012\033\013" +
    "\036\016\037\017\024\021\040\022\021\023\132\025\034" +
    "\001\002\000\024\012\ufff4\013\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\025\ufff4\001\002\000\004" +
    "\010\117\001\002\000\004\013\114\001\002\000\024\012" +
    "\ufff3\013\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3" +
    "\023\ufff3\025\ufff3\001\002\000\004\030\107\001\002\000" +
    "\004\010\101\001\002\000\010\010\046\013\042\032\044" +
    "\001\002\000\022\012\uffef\013\uffef\016\uffef\017\uffef\021" +
    "\uffef\022\uffef\023\uffef\025\uffef\001\002\000\026\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\071\011\uffde\015\uffde\026" +
    "\uffde\027\uffde\031\uffde\001\002\000\024\004\uffd9\005\uffd9" +
    "\006\064\007\063\011\uffd9\015\uffd9\026\uffd9\027\uffd9\031" +
    "\uffd9\001\002\000\024\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\011\uffdf\015\uffdf\026\uffdf\027\uffdf\031\uffdf\001\002\000" +
    "\004\026\061\001\002\000\010\010\046\013\042\032\044" +
    "\001\002\000\020\004\050\005\051\011\uffe1\015\uffe1\026" +
    "\uffe1\027\uffe1\031\uffe1\001\002\000\010\010\046\013\042" +
    "\032\044\001\002\000\010\010\046\013\042\032\044\001" +
    "\002\000\014\011\uffe4\015\uffe4\026\uffe4\027\uffe4\031\uffe4" +
    "\001\002\000\020\004\050\005\051\011\uffe1\015\uffe1\026" +
    "\uffe1\027\uffe1\031\uffe1\001\002\000\014\011\uffe2\015\uffe2" +
    "\026\uffe2\027\uffe2\031\uffe2\001\002\000\020\004\050\005" +
    "\051\011\uffe1\015\uffe1\026\uffe1\027\uffe1\031\uffe1\001\002" +
    "\000\014\011\uffe3\015\uffe3\026\uffe3\027\uffe3\031\uffe3\001" +
    "\002\000\004\011\060\001\002\000\024\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\015\uffdd\026\uffdd\027\uffdd\031" +
    "\uffdd\001\002\000\024\012\uffe9\013\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\021\uffe9\022\uffe9\023\uffe9\025\uffe9\001\002\000" +
    "\020\004\uffe0\005\uffe0\011\uffe0\015\uffe0\026\uffe0\027\uffe0" +
    "\031\uffe0\001\002\000\010\010\046\013\042\032\044\001" +
    "\002\000\010\010\046\013\042\032\044\001\002\000\024" +
    "\004\uffd9\005\uffd9\006\064\007\063\011\uffd9\015\uffd9\026" +
    "\uffd9\027\uffd9\031\uffd9\001\002\000\020\004\uffdb\005\uffdb" +
    "\011\uffdb\015\uffdb\026\uffdb\027\uffdb\031\uffdb\001\002\000" +
    "\024\004\uffd9\005\uffd9\006\064\007\063\011\uffd9\015\uffd9" +
    "\026\uffd9\027\uffd9\031\uffd9\001\002\000\020\004\uffda\005" +
    "\uffda\011\uffda\015\uffda\026\uffda\027\uffda\031\uffda\001\002" +
    "\000\012\010\046\011\uffd5\013\042\032\044\001\002\000" +
    "\006\011\uffd3\015\075\001\002\000\004\011\074\001\002" +
    "\000\024\004\uffdc\005\uffdc\006\uffdc\007\uffdc\011\uffdc\015" +
    "\uffdc\026\uffdc\027\uffdc\031\uffdc\001\002\000\010\010\046" +
    "\013\042\032\044\001\002\000\004\011\uffd6\001\002\000" +
    "\006\011\uffd3\015\075\001\002\000\004\011\uffd4\001\002" +
    "\000\010\010\046\013\042\032\044\001\002\000\004\015" +
    "\103\001\002\000\004\014\104\001\002\000\004\011\105" +
    "\001\002\000\004\026\106\001\002\000\024\012\uffe6\013" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\025\uffe6\001\002\000\012\010\046\013\042\014\110\032" +
    "\044\001\002\000\004\026\113\001\002\000\004\026\112" +
    "\001\002\000\024\012\uffeb\013\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\025\uffeb\001\002\000\024" +
    "\012\uffea\013\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\025\uffea\001\002\000\006\026\116\030\107" +
    "\001\002\000\024\012\uffec\013\uffec\016\uffec\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\025\uffec\001\002\000\024" +
    "\012\uffed\013\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022" +
    "\uffed\023\uffed\025\uffed\001\002\000\010\010\046\013\042" +
    "\032\044\001\002\000\006\027\126\031\127\001\002\000" +
    "\004\011\122\001\002\000\020\012\033\013\036\016\037" +
    "\017\024\021\040\022\021\025\034\001\002\000\024\012" +
    "\uffe8\013\uffe8\016\uffe8\017\uffe8\020\124\021\uffe8\022\uffe8" +
    "\023\uffe8\025\uffe8\001\002\000\020\012\033\013\036\016" +
    "\037\017\024\021\040\022\021\025\034\001\002\000\024" +
    "\012\uffe7\013\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022" +
    "\uffe7\023\uffe7\025\uffe7\001\002\000\010\010\046\013\042" +
    "\032\044\001\002\000\010\010\046\013\042\032\044\001" +
    "\002\000\004\011\uffd7\001\002\000\004\011\uffd8\001\002" +
    "\000\026\002\ufff7\012\ufff7\013\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\025\ufff7\001\002\000\022" +
    "\012\uffee\013\uffee\016\uffee\017\uffee\021\uffee\022\uffee\023" +
    "\uffee\025\uffee\001\002\000\004\013\135\001\002\000\004" +
    "\015\136\001\002\000\004\014\137\001\002\000\004\011" +
    "\140\001\002\000\004\026\141\001\002\000\024\012\uffe5" +
    "\013\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\025\uffe5\001\002\000\004\025\016\001\002\000\006" +
    "\011\ufffa\015\ufffa\001\002\000\006\011\ufffb\025\016\001" +
    "\002\000\004\011\146\001\002\000\004\022\021\001\002" +
    "\000\006\002\ufffd\025\ufffd\001\002\000\006\002\uffff\025" +
    "\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\006\003\004\020\003\001\001\000\004\003" +
    "\147\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\013\024\014\025\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\021\001\001\000\024\004\022\005\040" +
    "\006\031\013\027\014\034\015\025\016\026\017\024\023" +
    "\030\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\004\022\005\132\006\031" +
    "\013\027\014\034\015\025\016\026\017\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\044\021\046\022\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\027\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\056\021\046\022\042" +
    "\001\001\000\004\026\051\001\001\000\006\021\054\022" +
    "\042\001\001\000\006\021\052\022\042\001\001\000\002" +
    "\001\001\000\004\026\053\001\001\000\002\001\001\000" +
    "\004\026\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\066\001\001\000\004\022\064\001\001\000\004" +
    "\027\065\001\001\000\002\001\001\000\004\027\067\001" +
    "\001\000\002\001\001\000\012\007\071\010\072\021\046" +
    "\022\042\001\001\000\004\030\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\076\021\046\022\042" +
    "\001\001\000\002\001\001\000\004\030\077\001\001\000" +
    "\002\001\001\000\010\007\101\021\046\022\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\007\110\021\046" +
    "\022\042\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\117\011\120\021" +
    "\046\022\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\022\005\122\006\031\013\027\014\034\015" +
    "\025\016\026\017\024\001\001\000\002\001\001\000\022" +
    "\004\022\005\124\006\031\013\027\014\034\015\025\016" +
    "\026\017\024\001\001\000\002\001\001\000\010\007\130" +
    "\021\046\022\042\001\001\000\010\007\127\021\046\022" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\142\001\001\000\002\001" +
    "\001\000\010\012\013\024\144\025\012\001\001\000\002" +
    "\001\001\000\004\004\146\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$A3Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$A3Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$A3Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$A3Parser$actions {
  private final A3Parser parser;

  /** Constructor */
  CUP$A3Parser$actions(A3Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$A3Parser$do_action(
    int                        CUP$A3Parser$act_num,
    java_cup.runtime.lr_parser CUP$A3Parser$parser,
    java.util.Stack            CUP$A3Parser$stack,
    int                        CUP$A3Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$A3Parser$result;

      /* select the action based on the action number */
      switch (CUP$A3Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // AccParenR ::= 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(22/*AccParenR*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // AccParenR ::= COMMA Expression AccParenR 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(22/*AccParenR*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // AccParen ::= 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*AccParen*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // AccParen ::= Expression AccParenR 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(6/*AccParen*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BoolExpr ::= Expression NOTEQUAL Expression 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*BoolExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BoolExpr ::= Expression EQ Expression 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(7/*BoolExpr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PrimaryExpreR ::= 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(21/*PrimaryExpreR*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PrimaryExpreR ::= DIVIDE PrimaryExpre PrimaryExpreR 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(21/*PrimaryExpreR*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // PrimaryExpreR ::= TIMES PrimaryExpre PrimaryExpreR 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(21/*PrimaryExpreR*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // PrimaryExpre ::= ID LPAREN AccParen RPAREN 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*PrimaryExpre*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PrimaryExpre ::= LPAREN Expression RPAREN 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*PrimaryExpre*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PrimaryExpre ::= ID 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*PrimaryExpre*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PrimaryExpre ::= NUMBER 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(16/*PrimaryExpre*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MultiExpre ::= PrimaryExpre PrimaryExpreR 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(15/*MultiExpre*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= MINUS MultiExpre expr 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= PLUS MultiExpre expr 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(20/*expr*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Expression ::= MultiExpre expr 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(5/*Expression*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ReadSmt ::= READ LPAREN ID COMMA QUOTES RPAREN SEMI 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(13/*ReadSmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // WriteSmt ::= WRITE LPAREN Expression COMMA QUOTES RPAREN SEMI 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(12/*WriteSmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IfSmt ::= IF LPAREN BoolExpr RPAREN STATEMENT ELSE STATEMENT 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(11/*IfSmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IfSmt ::= IF LPAREN BoolExpr RPAREN STATEMENT 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(11/*IfSmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ReturnSmt ::= RETURN Expression SEMI 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(10/*ReturnSmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // AssignSmt ::= ID ASIGN QUOTES SEMI 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*AssignSmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // AssignSmt ::= ID ASIGN Expression SEMI 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(4/*AssignSmt*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LocalVar ::= TYPE AssignSmt 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*LocalVar*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LocalVar ::= TYPE ID SEMI 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(9/*LocalVar*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= StatementList STATEMENT 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*StatementList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= STATEMENT 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(17/*StatementList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // STATEMENT ::= ReadSmt 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // STATEMENT ::= WriteSmt 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // STATEMENT ::= IfSmt 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // STATEMENT ::= ReturnSmt 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // STATEMENT ::= AssignSmt 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= LocalVar 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= BLOCK 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // BLOCK ::= BEGIN StatementList END 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(2/*BLOCK*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FormalParam ::= TYPE ID 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(8/*FormalParam*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ParamList ::= FormalParam 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*ParamList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ParamList ::= ParamList COMMA FormalParam 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(19/*ParamList*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OptinalParam ::= 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*OptinalParam*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OptinalParam ::= ParamList 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(18/*OptinalParam*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // funcdef ::= TYPE ID LPAREN OptinalParam RPAREN BLOCK 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*funcdef*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // funcdef ::= TYPE MAIN ID LPAREN OptinalParam RPAREN BLOCK 
            {
              Integer RESULT = null;

              CUP$A3Parser$result = new java_cup.runtime.Symbol(1/*funcdef*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= Program funcdef 
            {
              Integer RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		 RESULT = e + 1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).value;
		RESULT = start_val;
              CUP$A3Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$A3Parser$parser.done_parsing();
          return CUP$A3Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= funcdef 
            {
              Integer RESULT = null;
		 RESULT = 1; 
              CUP$A3Parser$result = new java_cup.runtime.Symbol(14/*Program*/, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$A3Parser$stack.elementAt(CUP$A3Parser$top-0)).right, RESULT);
            }
          return CUP$A3Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

